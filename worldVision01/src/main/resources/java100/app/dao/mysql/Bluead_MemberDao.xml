<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- DAO 객체를 자동으로 생성하려면, namespace의 값이 인터페이스 이름과 같아야 한다. -->
<mapper namespace="java100.app.dao.Bluead_MemberDao">

	<resultMap type="member" id="memberMap">
		<id column="no" property="no" />
		<!-- 컬럼 이름과 프로퍼티 이름이 같아서 생략! -->
		<!-- <result column="name" property="name"/> <result column="email" property="email"/> -->
	</resultMap>

	<sql id="select1">
		select
		no,
		member_id,
		member_nick,
		member_pass,
		member_name,
		member_reg_no1,
		member_reg_no2,
		member_birth1,
		member_birth2,
		member_email,
		member_zip1,
		member_zip2,
		member_address1,
		member_address2,
		member_tel1,
		member_tel2
	</sql>

	<select id="findAll" resultMap="memberMap" parameterType="map">
		<include refid="select1" />
		from bluead_member

		<if test="words != null">
			<where>
				name in
				<foreach collection="words" item="word" open="(" close=")"
					separator=",">
					#{word}
				</foreach>
				or email in
				<foreach collection="words" item="word" open="(" close=")"
					separator=",">
					#{word}
				</foreach>
			</where>
		</if>

		<!-- 정렬 조건에 따라 SQL문을 변경한다. -->
		order by
		<choose>
			<when test="orderColumn == 'member_id' and align == 'asc'">
				member_id asc
			</when>
			<when test="orderColumn == 'member_id' and align == 'desc'">
				member_id desc
			</when>
			<when test="orderColumn == 'member_id' and align == 'asc'">
				member_id asc
			</when>
			<when test="orderColumn == 'member_id' and align == 'desc'">
				member_id desc
			</when>
			<when test="orderColumn == 'member_id' and align == 'desc'">
				member_id desc
			</when>
			<otherwise>
				member_id asc
			</otherwise>
		</choose>

		<!-- 페이지징 처리 -->
		limit #{startIndex}, #{size}
	</select>

	<select id="findByNo" resultMap="memberMap" parameterType="int">
		<include refid="select1" />
		from bluead_member
		where no=#{value}
	</select>

	<!-- <select id="findByEmailAndPassword" resultMap="memberMap" parameterType="map"> 
		<include refid="select1"/> from ex_memb where email=#{email} and pwd=password(#{password}) 
		</select> <select id="findByEmail" resultMap="memberMap" parameterType="string"> 
		<include refid="select1"/> from ex_memb where email=#{email} </select> -->
	<select id="countAll" resultType="int">
		select count(*) from bluead_member
	</select>

	<!-- <insert id="insert" parameterType="member" useGeneratedKeys="true" 
		keyColumn="no" keyProperty="no"> insert into ex_memb(name,email,pwd,regdt) 
		values(#{name},#{email},password(#{password}),now()) </insert> <update id="update" 
		parameterType="member"> update ex_memb set name=#{name}, email=#{email}, 
		pwd=password(#{password}) where no=#{no} </update> <delete id="delete" parameterType="int"> 
		delete from ex_memb where no=#{value} </delete> -->

</mapper>  









