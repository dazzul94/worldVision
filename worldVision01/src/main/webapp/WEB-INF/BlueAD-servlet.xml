<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<context:component-scan base-package="java100.app.web.BlueAD">
	</context:component-scan>


	<!-- 페이지 컨트롤러가 사용할 객체 설정 -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- 클라이언트가 보낸 데이터의 Content-Type이 "application/json"일 때, "자바 객체"로 변환해주는 
					컨버터 또한 요청 핸들러가 리턴한 자바 객체를 "application/json" 형식의 문자열로 변환해주는 작업도 함께 수행한다. -->
				<bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />

				<!-- 클라이언트가 보낸 데이터의 Content-Type이 "text/plain"일 때, String으로 변환해주는 컨버터 -->
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter" />
			</list>
		</property>
	</bean>

	<!-- 멀티파트 형식으로 전송된 데이터를 처리할 객체를 등록한다. -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="5000000" />
	</bean>


	<!-- 기본 ViewResolver를 교체한다. -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="1" />
	</bean>

	<!-- 다운로드만 처리하는 viewResolver order는 두개 이상 존재하는 viewResolver 를 위해서 우선 순위를 
		매긴것 -->
	<bean id="downloadViewResolver"
		class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="0" />
	</bean>
	<!-- 다운로드를 처리할 뷰 클래스를 등록 -->
	<bean id="download" class="java100.app.web.BlueAD.BoardController.DownloadView"/>

	<!-- url 처리할 컨트롤러 클래스 등록
	<bean id="down" class="Spring.DownloadController"/>-->



	<!-- <bean id="springDownload" class="util.component.FileDownload" / -->

	<!-- 인터셉터를 등록한다. <mvc:interceptors> <mvc:interceptor> <mvc:mapping path="/**"/> 
		<mvc:exclude-mapping path="/auth/**"/> <bean class="java100.app.web.interceptor.BlueADInterceptor"/> 
		</mvc:interceptor> </mvc:interceptors> -->

</beans>














